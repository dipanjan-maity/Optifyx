# -*- coding: utf-8 -*-
"""spammaildetector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17W3Kwz2Gr7hCiRPLrALApiPjtDEyy5Se
"""

import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
df = pd.read_csv("/content/spam.csv", encoding="latin-1")[["v1", "v2"]]
df = df.rename(columns={"v1": "label", "v2": "message"})

# Encode labels (ham -> 0, spam -> 1)
df["label"] = df["label"].map({"ham": 0, "spam": 1})

# Download necessary NLTK resources
nltk.download("stopwords")
nltk.download("punkt")
nltk.download("wordnet")
# Download the 'punkt_tab' resource
nltk.download('punkt_tab') # This line is added to download the missing resource.

# Initialize stopwords and lemmatizer
stop_words = set(stopwords.words("english"))
lemmatizer = WordNetLemmatizer()

# Text preprocessing function
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r"[^\w\s]", "", text)  # Remove punctuation
    words = word_tokenize(text)  # Tokenize words
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]  # Remove stopwords & lemmatize
    return " ".join(words)

# Apply preprocessing
df["cleaned_message"] = df["message"].apply(preprocess_text)

# Convert text into numerical features using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df["cleaned_message"]).toarray()
y = df["label"]

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")
print("Classification Report:\n", classification_report(y_test, y_pred))

# Function to predict if an email is spam or ham
def predict_spam():
    user_email = input("Enter an email message to check if it's Spam or Ham: ")
    email = preprocess_text(user_email)
    email_vector = vectorizer.transform([email]).toarray()
    prediction = model.predict(email_vector)
    print("\nPrediction:", "Spam" if prediction[0] == 1 else "Ham")

# Run user input test
predict_spam()